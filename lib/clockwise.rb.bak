#vim: set foldmethod=method
class Integer
  def seconds
    TimeUnit.new self
  end

  def minutes
    Minute.new self
  end

  def hours
    Hour.new self
  end

  def days
    Day.new self
  end

  def weeks
    Week.new self
  end

  def months
    Month.new self
  end

  def years
    Year.new self
  end
end

class TimeUnit < Numeric
  include Comparable
  include Enumerable
  attr_reader :value
  SECS = 1

  def initialize number
    @value = number
  end

  # For each smaller time unit in time...
  def each &block
    1.upto @value do |val|
      sleep self.class::SECS
      if block_given?
        block.call val
      else
        yield val
      end
    end
    nil
  end

  # After x units of time, or, if no block is given, the time in x time units
  def later &block
    if block_given?
      sleep self.to_i
      block.call @value
    else
      Time.now + self.to_i
    end
  end

  # The time x time units ago
  def earlier
    Time.now - self.to_i
  end

  def <=>(other)
    self.to_i <=> other.to_i
  end

  # how many seconds in multiple units of time
  def and(other)
    self.to_i + other.to_i
  end

  # basically this unit of time in seconds.
  def to_i
    self.class::SECS * @value
  end

  %w[to_r rationalize].each do |name|
    alias_method "#{name}", :to_i
  end

  private
    # each_minute each_hour each_day etc...
    # FIXME each_minute of hour doesnt seem to work properly (1.hours.each_minute kept
    # going after >70 minutes
    def each_x time, &block
      1.upto self.to_i do |val|
        sleep time
        if block_given?
          block.call val
        else
          yield val
        end
      end
      nil
    end
end

class Minute < TimeUnit
  SECS = 60
  def each_second &block
    each_x 1, &block
  end
end

class Hour < Minute
  SECS = 3600
  def each_minute &block
    each_x 60, &block
  end
end

class Day < Hour
  SECS = 86400
  def each_hour &block
    each_x 3600, &block
  end
end

class Week < Day
  SECS = 604800
  def each_day &block
    each_x 86400, &block
  end
end

class Month < Week
  SECS = 2.63e+6
  def each_week &block
    each_x 604800, &block
  end
end

class Year < Month
  SECS = 3.156e+7
  def each_month &block
    each_x 2.63e+6, &block
  end
end
